package zipping;

public enum Message {
    TARGET_PARAM_REQUIRED_IN_METHOD("Необходимо указать параметр -t. Параметр является необходимым для функций 'save' и 'retrieve'."),

    PASSWORD_REQUIRED("Файл защищен паролем. Необходимо указать пароль"),

    DIR_FOR_ZIP_NOT_EXISTS("Файла/директории, которую необходимо за архивировать не существует."),

    FILE_IS_NOT_ZIP("Указанный файл не является zip архивом"),

    TARGET_PATH_NOT_DIR("Указанный путь для размещения zip архива не является директорией."),

    EMPTY_PASSWORD("Пароль должен состоять хотя бы из одного знака."),

    NO_CSUM_FILE("Для указанного файла расчет контрольной суммы не производился, " +
            "либо файл с архивом и контрольной суммой находятся в разных директориях."),

    CSUM_SUCCESS("Проверка контрольной суммы прошла успешно. Проверяемый файл не изменялся."),

    CSUM_FAIL("Проверка контрольной суммы провалилась. Проверяемый файл подвергался изменениям."),

    PASSWORD_FAIL("Пароль указан не верно!"),

    SOURCE_PARAM_DESCRIPTION("Для указания источника получения файла\\директории используйте флаг -f. " +
            "Например '-f C:\\Example_dir\\example.txt' или '-f C:\\Example_dir'. " +
            "\nВнимание! В случае использования функции 'save' в качестве источника данных может быть указаны как директория так и файл. " +
            "Для всех остальных функций следует указывать только файл"),

    TARGET_PARAM_DESCRIPTION("Для указания директории в которую необходимо поместить готовый zip архив или произвести извлечение файлов, " +
            "необходимо использовать флаг -t или --target_directory. " +
            "Например, '-t C:\\Example_dir'"),

    PASSWORD_PARAM_DESCRIPTION("Для того чтобы указать пароль используйте флаг -p или --password. Например '-p example'"),

    SUM_PARAM_DESCRIPTION("Для расчета\\проверки контрольной суммы используйте флаг -s"),

    NEED_HELP("Хотите посмотреть возможные опции? (y/N)"),

    YES_NO_REQUIRED("Необходимо указать 'y' или 'N'"),

    PARAMS_ERROR("Параметры указаны неверно");

    private String msg;

    /**
     * Конструктор
     * */
    Message(String msg){
        this.msg = msg;
    }

    /**
     * Геттер
     * */
    public String getMessage() {
        return msg;
    }
}
